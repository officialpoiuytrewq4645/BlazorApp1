@page "/Tool"
@using PoiString
<PageTitle>Tool</PageTitle>

<h1>Counter</h1>
@*<EditForm model>*@


<EditForm Model="@exampleModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        Position
        <br />
        X:
        <InputNumber @bind-Value="exampleModel.posX" />
        Y:
        <InputNumber @bind-Value="exampleModel.posY" />
        Z:
        <InputNumber @bind-Value="exampleModel.posZ" />
    </div>
    <div>
        Rotation
        <br />
       @* X:
        <InputNumber @bind-Value="exampleModel.rotX" />
        Y:
        <InputNumber @bind-Value="exampleModel.rotY" />
        Z:*@
        <InputNumber @bind-Value="exampleModel.Rotation" />
    </div>
    <div>
        Target Position
        <br />
        X:
        <InputNumber @bind-Value="exampleModel.targetX" />
        Y:
        <InputNumber @bind-Value="exampleModel.targetY" />
        Z:
        <InputNumber @bind-Value="exampleModel.targetZ" />
    </div>
    <br/>
    <div>
        <button type="submit">Submit</button>
    </div>


    @*exampleModel.position.ToString()<br/> <br/>*@
    @exampleModel.ReturnVal
</EditForm>




@*</EditForm>*@
@*<p role="status">Current count: @currentCount</p>*@

@*<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>*@
@code {

    private ExampleModel exampleModel = new ExampleModel();

    private void HandleValidSubmit()
    {
        exampleModel.ReturnVal = "";
        Vim.Math3d.Vector3 TeleportDestination = new Vim.Math3d.Vector3(exampleModel.targetX, exampleModel.targetY, exampleModel.targetZ);
        Vim.Math3d.Vector3 SpawnAtPosition = new Vim.Math3d.Vector3(exampleModel.posX, exampleModel.posY, exampleModel.posZ);
        TeleportDestination -= SpawnAtPosition;
        var rot = Vim.Math3d.Quaternion.CreateFromAxisAngle(Vim.Math3d.Vector3.UnitY, MathF.Round((float)(exampleModel.Rotation*(Math.PI/180)),3) );
        exampleModel.position = TeleportDestination.TransformNormal(Vim.Math3d.Matrix4x4.CreateFromQuaternion(rot));
        exampleModel.position.SetX(MathF.Round(exampleModel.position.X));
        exampleModel.position.SetY(MathF.Round(exampleModel.position.Y));
        exampleModel.position.SetZ(MathF.Round(exampleModel.position.Z));

       

        Console.WriteLine(exampleModel.position);
        try
        {
            //poistring does work, removed because not latest version
            //PoiString.Knowledge.KnowledgeManager.InitializeStructure();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

            //PoiString.AttTypes.NetworkPrefab prefab = new PoiString.AttTypes.NetworkPrefab()
            //    {
            //        PrefabHash = 1,
            //        Components = new List<PoiString.AttTypes.Components.ATTSerializableComponent>()
            //        {
            //            new PoiString.AttTypes.Components.MapBoard()
            //            {
            //                 mapHash = 0,
            //                 positionOffset = new PoiString.AttTypes.Components.Vector2() { x = 1, y = 3 },
            //                 zoom = 1,
            //                 unlockPieceIndex = 0
            //            }
            //        }
            //    };
            //exampleModel.test = PoiStentions.GetAsATTString(prefab);
        }
        exampleModel.ReturnVal += "spawn string-raw ";

        uint[] data = new uint[] { 49418, 69, 49418, 0, 0, 0, 0, 0, 0, 0, 1065353216, 3146178080, 128, 0, 0, 0, 2147483649, 0, 0, 0 };
        //Position XYZ
        data[3] = StringValFromFloat(exampleModel.posX);
        data[4] = StringValFromFloat(exampleModel.posY);
        data[5] = StringValFromFloat(exampleModel.posZ);
        //Rotation XYZW
        data[6] = StringValFromFloat(rot.X);
        data[7] = StringValFromFloat(rot.Y);
        data[8] = StringValFromFloat(rot.Z);
        data[9] = StringValFromFloat(rot.W);
        //Target XYZ
        data[13] = StringValFromFloat(exampleModel.position.X);
        data[14] = StringValFromFloat(exampleModel.position.Y);
        data[15] = StringValFromFloat(exampleModel.position.Z);

        foreach (var item in data)
        {
            exampleModel.ReturnVal += item.ToString();
            exampleModel.ReturnVal += ",";
        }
        InvokeAsync(StateHasChanged);
        //Vim.Math3d.Transformable3D.RotateAround(
    }
    public static uint StringValFromFloat(float val)
    {
        uint val2 = 0;
        val2 = BitConverter.ToUInt32(BitConverter.GetBytes(val), 0);
        return val2;
    }
    public class ExampleModel
    {
        public float posX = 1;
        public float posY;
        public float posZ;

        //public float rotX;
        //public float rotY = 90;
        public float Rotation;

        public float targetX;
        public float targetY;
        public float targetZ;

        public Vim.Math3d.Vector3 position = new Vim.Math3d.Vector3(0, 0, 0);
        public string ReturnVal;
    }
}
